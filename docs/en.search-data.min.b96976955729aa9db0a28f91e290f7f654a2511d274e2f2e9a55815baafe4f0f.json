[{"id":0,"href":"/lua-tutorial/docs/","title":"Introduction","section":"Introduction to LUA","content":"text\n"},{"id":1,"href":"/lua-tutorial/docs/01-introduction/","title":"Index","section":"Introduction","content":"\rIntroduction\r#\rLua is a simple and lightweight procedural language with automatic memory management. Because of its simplicity it could be learned in a week.\nVariables\r#\rVariable is a simple container for values. It can be assigned a value with = operator. Special value for empty value is nil, which signifies no value. For efficiency, you might want to assign nil to variable after its use to remove its previous value. s = \u0026#34;Hello Lua\u0026#34; a = 10 print(s, a) Execute \u0026raquo; Printing value of variables\r#\rLua has few built-in functions. To print a numeric or string value or a variable we can use function print().\nA single statement doesn\u0026rsquo;t have to end with a semicolon, but you can be use it separate two statements on the same line, even though it is also optional.\ns = \u0026#34;Pi is\u0026#34; p = 3.14 print(s, p) Execute \u0026raquo; "},{"id":2,"href":"/lua-tutorial/docs/02-types/","title":"Index","section":"Introduction","content":"\rLua variable types\r#\rLua is dynamically typed language, so any variable will have type based on value assigned to it.\nLua has eight basic types: number, string, boolean, table, userdata, function, thread and nil.\nNumbers can be whole numbers or numbers floating point numbers. Booleans can be either true or false. String values are created with either double or single quotation marks.\ns = \u0026#34;Hello Lua\u0026#34; print(s) b = 3.14 print(\u0026#34;pi is \u0026#34;) print(b) Execute \u0026raquo; Type operator\r#\rBuilt in function type can return string identifying the type of variable passed as an argument.\nprint(type(\u0026#34;Hello world\u0026#34;)) --\u0026gt; string print(type(10.4*3)) --\u0026gt; number print(type(print)) --\u0026gt; function print(type(type)) --\u0026gt; function print(type(true)) --\u0026gt; boolean print(type(nil)) --\u0026gt; nil print(type(type(X))) --\u0026gt; string Execute \u0026raquo; "}]